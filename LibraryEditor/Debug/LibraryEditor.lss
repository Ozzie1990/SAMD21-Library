
LibraryEditor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000428  20000000  000005b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  20000428  000009dc  00020428  2**2
                  ALLOC
  3 .stack        00000404  2000044c  00000a00  00020428  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY
  6 .debug_info   000053c1  00000000  00000000  000204a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052e  00000000  00000000  0002586a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000023c  00000000  00000000  00025d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000088  00000000  00000000  00025fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  0002605c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011c4a  00000000  00000000  000260b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000b73  00000000  00000000  00037cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007102a  00000000  00000000  00038871  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001fc  00000000  00000000  000a989c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	50 08 00 20 19 01 00 00 15 01 00 00 15 01 00 00     P.. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 2d 02 00 00     ............-...
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000428 	.word	0x20000428
  d4:	00000000 	.word	0x00000000
  d8:	000005b4 	.word	0x000005b4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	2000042c 	.word	0x2000042c
 108:	000005b4 	.word	0x000005b4
 10c:	000005b4 	.word	0x000005b4
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	000005b4 	.word	0x000005b4
 1c8:	20000000 	.word	0x20000000
 1cc:	20000428 	.word	0x20000428
 1d0:	20000004 	.word	0x20000004
 1d4:	20000428 	.word	0x20000428
 1d8:	2000044c 	.word	0x2000044c
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	00000401 	.word	0x00000401
 1f8:	00000239 	.word	0x00000239

000001fc <tempFunc>:
	tempFunc();
}

void tempFunc() {
	
	if(tmpCount >=19) {
 1fc:	4b09      	ldr	r3, [pc, #36]	; (224 <tempFunc+0x28>)
 1fe:	681b      	ldr	r3, [r3, #0]
 200:	2b12      	cmp	r3, #18
 202:	dc08      	bgt.n	216 <tempFunc+0x1a>
		tmpCount = 0;
		count++;
		} else {
		tmpCount++;
 204:	3301      	adds	r3, #1
 206:	4a07      	ldr	r2, [pc, #28]	; (224 <tempFunc+0x28>)
 208:	6013      	str	r3, [r2, #0]
	}
	
	TC3_REG->INTFLAG.bits.MC0 = 1;
 20a:	4a07      	ldr	r2, [pc, #28]	; (228 <tempFunc+0x2c>)
 20c:	7b93      	ldrb	r3, [r2, #14]
 20e:	2110      	movs	r1, #16
 210:	430b      	orrs	r3, r1
 212:	7393      	strb	r3, [r2, #14]
}
 214:	4770      	bx	lr
		tmpCount = 0;
 216:	4b03      	ldr	r3, [pc, #12]	; (224 <tempFunc+0x28>)
 218:	2200      	movs	r2, #0
 21a:	601a      	str	r2, [r3, #0]
		count++;
 21c:	685a      	ldr	r2, [r3, #4]
 21e:	3201      	adds	r2, #1
 220:	605a      	str	r2, [r3, #4]
 222:	e7f2      	b.n	20a <tempFunc+0xe>
 224:	20000444 	.word	0x20000444
 228:	42002c00 	.word	0x42002c00

0000022c <TC3_Handler>:
void TC3_Handler() {
 22c:	b510      	push	{r4, lr}
	tempFunc();
 22e:	4b01      	ldr	r3, [pc, #4]	; (234 <TC3_Handler+0x8>)
 230:	4798      	blx	r3
}
 232:	bd10      	pop	{r4, pc}
 234:	000001fd 	.word	0x000001fd

00000238 <main>:


int main(void)
{
 238:	b5f0      	push	{r4, r5, r6, r7, lr}
 23a:	46c6      	mov	lr, r8
 23c:	b500      	push	{lr}
 23e:	b082      	sub	sp, #8
    /* Initialize the SAM system */
    //SystemInit();
	
	//TEST CODE DELETE LATER//
	PORTA_REG->DIR.bit.bit18 = 1;
 240:	4b21      	ldr	r3, [pc, #132]	; (2c8 <main+0x90>)
 242:	681a      	ldr	r2, [r3, #0]
 244:	2480      	movs	r4, #128	; 0x80
 246:	02e4      	lsls	r4, r4, #11
 248:	4322      	orrs	r2, r4
 24a:	601a      	str	r2, [r3, #0]
	
	PORTA_REG->OUT.bit.bit18 = HIGH;
 24c:	691a      	ldr	r2, [r3, #16]
 24e:	4322      	orrs	r2, r4
 250:	611a      	str	r2, [r3, #16]
	int state = 1;
	
	tc_init(3, 0, MFRQ, 0xC350);
 252:	4b1e      	ldr	r3, [pc, #120]	; (2cc <main+0x94>)
 254:	2201      	movs	r2, #1
 256:	2100      	movs	r1, #0
 258:	2003      	movs	r0, #3
 25a:	4d1d      	ldr	r5, [pc, #116]	; (2d0 <main+0x98>)
 25c:	47a8      	blx	r5
	INTERRUPT_SAMD21->ISER_SAMD21.bits.TC3 = 1;
 25e:	4b1d      	ldr	r3, [pc, #116]	; (2d4 <main+0x9c>)
 260:	681a      	ldr	r2, [r3, #0]
 262:	4314      	orrs	r4, r2
 264:	601c      	str	r4, [r3, #0]
	tc_en(TC3_REG, 1);
 266:	2101      	movs	r1, #1
 268:	481b      	ldr	r0, [pc, #108]	; (2d8 <main+0xa0>)
 26a:	4b1c      	ldr	r3, [pc, #112]	; (2dc <main+0xa4>)
 26c:	4798      	blx	r3
	
	//reflow_oven_init();
	//END TEST CODE//
	
	volatile int a = 0;
 26e:	2300      	movs	r3, #0
 270:	9301      	str	r3, [sp, #4]
	int state = 1;
 272:	2201      	movs	r2, #1

    /* Replace with your application code */
    while (1) 
    {
		if(count >= 5 && state == 1) {
 274:	491a      	ldr	r1, [pc, #104]	; (2e0 <main+0xa8>)
			PORTA_REG->OUT.bit.bit18 = LOW;
			state = 0;
			count = 0;
		} else if (count >= 5 && state == 0) {
			PORTA_REG->OUT.bit.bit18 = HIGH;	
 276:	4814      	ldr	r0, [pc, #80]	; (2c8 <main+0x90>)
 278:	2380      	movs	r3, #128	; 0x80
 27a:	02db      	lsls	r3, r3, #11
 27c:	469c      	mov	ip, r3
			state = 1;
			count = 0;
 27e:	000f      	movs	r7, r1
 280:	2500      	movs	r5, #0
		} else if (count >= 5 && state == 0) {
 282:	000c      	movs	r4, r1
 284:	000e      	movs	r6, r1
			count = 0;
 286:	4688      	mov	r8, r1
 288:	e00f      	b.n	2aa <main+0x72>
			PORTA_REG->OUT.bit.bit18 = LOW;
 28a:	6903      	ldr	r3, [r0, #16]
 28c:	4a15      	ldr	r2, [pc, #84]	; (2e4 <main+0xac>)
 28e:	4013      	ands	r3, r2
 290:	6103      	str	r3, [r0, #16]
			count = 0;
 292:	4643      	mov	r3, r8
 294:	605d      	str	r5, [r3, #4]
			state = 0;
 296:	002a      	movs	r2, r5
			count = 0;
 298:	e004      	b.n	2a4 <main+0x6c>
		} else if (count >= 5 && state == 0) {
 29a:	6863      	ldr	r3, [r4, #4]
 29c:	2b04      	cmp	r3, #4
 29e:	dd01      	ble.n	2a4 <main+0x6c>
 2a0:	2a00      	cmp	r2, #0
 2a2:	d00a      	beq.n	2ba <main+0x82>
		}
		
		a++;
 2a4:	9b01      	ldr	r3, [sp, #4]
 2a6:	3301      	adds	r3, #1
 2a8:	9301      	str	r3, [sp, #4]
		if(count >= 5 && state == 1) {
 2aa:	684b      	ldr	r3, [r1, #4]
 2ac:	2b04      	cmp	r3, #4
 2ae:	ddf4      	ble.n	29a <main+0x62>
 2b0:	2a01      	cmp	r2, #1
 2b2:	d0ea      	beq.n	28a <main+0x52>
		} else if (count >= 5 && state == 0) {
 2b4:	6873      	ldr	r3, [r6, #4]
 2b6:	2b04      	cmp	r3, #4
 2b8:	ddf4      	ble.n	2a4 <main+0x6c>
			PORTA_REG->OUT.bit.bit18 = HIGH;	
 2ba:	6903      	ldr	r3, [r0, #16]
 2bc:	4662      	mov	r2, ip
 2be:	4313      	orrs	r3, r2
 2c0:	6103      	str	r3, [r0, #16]
			count = 0;
 2c2:	607d      	str	r5, [r7, #4]
			state = 1;
 2c4:	2201      	movs	r2, #1
 2c6:	e7ed      	b.n	2a4 <main+0x6c>
 2c8:	41004400 	.word	0x41004400
 2cc:	0000c350 	.word	0x0000c350
 2d0:	000002e9 	.word	0x000002e9
 2d4:	e000e100 	.word	0xe000e100
 2d8:	42002c00 	.word	0x42002c00
 2dc:	000003ed 	.word	0x000003ed
 2e0:	20000444 	.word	0x20000444
 2e4:	fffbffff 	.word	0xfffbffff

000002e8 <tc_init>:
 */ 

#include "tc.h"
#include "interrupt.h"

void tc_init(int tc, int clk_src, int mode, uint16_t cc0) {
 2e8:	b570      	push	{r4, r5, r6, lr}
	TC_16bit_t * reg;
	
	switch(tc) {
 2ea:	3803      	subs	r0, #3
 2ec:	2804      	cmp	r0, #4
 2ee:	d82d      	bhi.n	34c <tc_init+0x64>
 2f0:	0080      	lsls	r0, r0, #2
 2f2:	4c35      	ldr	r4, [pc, #212]	; (3c8 <tc_init+0xe0>)
 2f4:	5820      	ldr	r0, [r4, r0]
 2f6:	4687      	mov	pc, r0
		
		case 3 : PM_REG->AHBCMASK.bits.PMTC3 = 1;
 2f8:	4c34      	ldr	r4, [pc, #208]	; (3cc <tc_init+0xe4>)
 2fa:	6a25      	ldr	r5, [r4, #32]
 2fc:	2080      	movs	r0, #128	; 0x80
 2fe:	0100      	lsls	r0, r0, #4
 300:	4328      	orrs	r0, r5
 302:	6220      	str	r0, [r4, #32]
		GCLK_REG->CLKCNTRL.bits.ID = GCLK_TCC2_TC3;
 304:	4c32      	ldr	r4, [pc, #200]	; (3d0 <tc_init+0xe8>)
 306:	8860      	ldrh	r0, [r4, #2]
 308:	253f      	movs	r5, #63	; 0x3f
 30a:	43a8      	bics	r0, r5
 30c:	251b      	movs	r5, #27
 30e:	4328      	orrs	r0, r5
 310:	8060      	strh	r0, [r4, #2]
		reg = TC3_REG;
 312:	4e30      	ldr	r6, [pc, #192]	; (3d4 <tc_init+0xec>)
		
		default:
		return;
	}
	
	GCLK_REG->CLKCNTRL.bits.GEN = clk_src;
 314:	482e      	ldr	r0, [pc, #184]	; (3d0 <tc_init+0xe8>)
 316:	8844      	ldrh	r4, [r0, #2]
 318:	250f      	movs	r5, #15
 31a:	400d      	ands	r5, r1
 31c:	022d      	lsls	r5, r5, #8
 31e:	492e      	ldr	r1, [pc, #184]	; (3d8 <tc_init+0xf0>)
 320:	4021      	ands	r1, r4
 322:	4329      	orrs	r1, r5
 324:	8041      	strh	r1, [r0, #2]
	GCLK_REG->CLKCNTRL.bits.CLKEN = 1;
 326:	8844      	ldrh	r4, [r0, #2]
 328:	2180      	movs	r1, #128	; 0x80
 32a:	01c9      	lsls	r1, r1, #7
 32c:	4321      	orrs	r1, r4
 32e:	8041      	strh	r1, [r0, #2]
	reg->CTRLA.bits.WAVEGEN = mode;
 330:	8831      	ldrh	r1, [r6, #0]
 332:	2003      	movs	r0, #3
 334:	4010      	ands	r0, r2
 336:	0140      	lsls	r0, r0, #5
 338:	2260      	movs	r2, #96	; 0x60
 33a:	4391      	bics	r1, r2
 33c:	000a      	movs	r2, r1
 33e:	4302      	orrs	r2, r0
 340:	8032      	strh	r2, [r6, #0]
	reg->CC0 = cc0;
 342:	8333      	strh	r3, [r6, #24]
	reg->INTENSET.bits.MC0 = 1;	//DEFAULTED TO ENABLE INTERRUPT
 344:	7b73      	ldrb	r3, [r6, #13]
 346:	2210      	movs	r2, #16
 348:	4313      	orrs	r3, r2
 34a:	7373      	strb	r3, [r6, #13]
	
	//INTERRUPT_SAMD21->ISER_SAMD21.bits.TC3 = 1;  //Global enable set up
}
 34c:	bd70      	pop	{r4, r5, r6, pc}
		case 4 : PM_REG->AHBCMASK.bits.PMTC4 = 1;
 34e:	4c1f      	ldr	r4, [pc, #124]	; (3cc <tc_init+0xe4>)
 350:	6a25      	ldr	r5, [r4, #32]
 352:	2080      	movs	r0, #128	; 0x80
 354:	0140      	lsls	r0, r0, #5
 356:	4328      	orrs	r0, r5
 358:	6220      	str	r0, [r4, #32]
		GCLK_REG->CLKCNTRL.bits.ID = GCLK_TC4_TC5;
 35a:	4c1d      	ldr	r4, [pc, #116]	; (3d0 <tc_init+0xe8>)
 35c:	8860      	ldrh	r0, [r4, #2]
 35e:	253f      	movs	r5, #63	; 0x3f
 360:	43a8      	bics	r0, r5
 362:	251c      	movs	r5, #28
 364:	4328      	orrs	r0, r5
 366:	8060      	strh	r0, [r4, #2]
		reg = TC4_REG;
 368:	4e1c      	ldr	r6, [pc, #112]	; (3dc <tc_init+0xf4>)
		break;
 36a:	e7d3      	b.n	314 <tc_init+0x2c>
		case 5 : PM_REG->AHBCMASK.bits.PMTC5 = 1;
 36c:	4c17      	ldr	r4, [pc, #92]	; (3cc <tc_init+0xe4>)
 36e:	6a25      	ldr	r5, [r4, #32]
 370:	2080      	movs	r0, #128	; 0x80
 372:	0180      	lsls	r0, r0, #6
 374:	4328      	orrs	r0, r5
 376:	6220      	str	r0, [r4, #32]
		GCLK_REG->CLKCNTRL.bits.ID = GCLK_TC4_TC5;
 378:	4c15      	ldr	r4, [pc, #84]	; (3d0 <tc_init+0xe8>)
 37a:	8860      	ldrh	r0, [r4, #2]
 37c:	253f      	movs	r5, #63	; 0x3f
 37e:	43a8      	bics	r0, r5
 380:	251c      	movs	r5, #28
 382:	4328      	orrs	r0, r5
 384:	8060      	strh	r0, [r4, #2]
		reg = TC5_REG;
 386:	4e16      	ldr	r6, [pc, #88]	; (3e0 <tc_init+0xf8>)
		break;
 388:	e7c4      	b.n	314 <tc_init+0x2c>
		case 6 : PM_REG->AHBCMASK.bits.PMTC6 = 1;
 38a:	4c10      	ldr	r4, [pc, #64]	; (3cc <tc_init+0xe4>)
 38c:	6a25      	ldr	r5, [r4, #32]
 38e:	2080      	movs	r0, #128	; 0x80
 390:	01c0      	lsls	r0, r0, #7
 392:	4328      	orrs	r0, r5
 394:	6220      	str	r0, [r4, #32]
		GCLK_REG->CLKCNTRL.bits.ID = GCLK_TC6_TC7;
 396:	4c0e      	ldr	r4, [pc, #56]	; (3d0 <tc_init+0xe8>)
 398:	8860      	ldrh	r0, [r4, #2]
 39a:	253f      	movs	r5, #63	; 0x3f
 39c:	43a8      	bics	r0, r5
 39e:	251d      	movs	r5, #29
 3a0:	4328      	orrs	r0, r5
 3a2:	8060      	strh	r0, [r4, #2]
		reg = TC6_REG;
 3a4:	4e0f      	ldr	r6, [pc, #60]	; (3e4 <tc_init+0xfc>)
		break;
 3a6:	e7b5      	b.n	314 <tc_init+0x2c>
		case 7 : PM_REG->AHBCMASK.bits.PMTC7 = 1;
 3a8:	4c08      	ldr	r4, [pc, #32]	; (3cc <tc_init+0xe4>)
 3aa:	6a25      	ldr	r5, [r4, #32]
 3ac:	2080      	movs	r0, #128	; 0x80
 3ae:	0200      	lsls	r0, r0, #8
 3b0:	4328      	orrs	r0, r5
 3b2:	6220      	str	r0, [r4, #32]
		GCLK_REG->CLKCNTRL.bits.ID = GCLK_TC6_TC7;
 3b4:	4c06      	ldr	r4, [pc, #24]	; (3d0 <tc_init+0xe8>)
 3b6:	8860      	ldrh	r0, [r4, #2]
 3b8:	253f      	movs	r5, #63	; 0x3f
 3ba:	43a8      	bics	r0, r5
 3bc:	251d      	movs	r5, #29
 3be:	4328      	orrs	r0, r5
 3c0:	8060      	strh	r0, [r4, #2]
		reg = TC7_REG;
 3c2:	4e09      	ldr	r6, [pc, #36]	; (3e8 <tc_init+0x100>)
		break;
 3c4:	e7a6      	b.n	314 <tc_init+0x2c>
 3c6:	46c0      	nop			; (mov r8, r8)
 3c8:	00000578 	.word	0x00000578
 3cc:	40000400 	.word	0x40000400
 3d0:	40000c00 	.word	0x40000c00
 3d4:	42002c00 	.word	0x42002c00
 3d8:	fffff0ff 	.word	0xfffff0ff
 3dc:	42003000 	.word	0x42003000
 3e0:	42003400 	.word	0x42003400
 3e4:	42003800 	.word	0x42003800
 3e8:	42003c00 	.word	0x42003c00

000003ec <tc_en>:

void tc_en(TC_16bit_t * tc, int enable) {
	tc->CTRLA.bits.ENABLE = enable;
 3ec:	8803      	ldrh	r3, [r0, #0]
 3ee:	2201      	movs	r2, #1
 3f0:	400a      	ands	r2, r1
 3f2:	0052      	lsls	r2, r2, #1
 3f4:	2102      	movs	r1, #2
 3f6:	438b      	bics	r3, r1
 3f8:	0019      	movs	r1, r3
 3fa:	4311      	orrs	r1, r2
 3fc:	8001      	strh	r1, [r0, #0]
}
 3fe:	4770      	bx	lr

00000400 <__libc_init_array>:
 400:	b570      	push	{r4, r5, r6, lr}
 402:	4e0d      	ldr	r6, [pc, #52]	; (438 <STACK_SIZE+0x38>)
 404:	4d0d      	ldr	r5, [pc, #52]	; (43c <STACK_SIZE+0x3c>)
 406:	2400      	movs	r4, #0
 408:	1bad      	subs	r5, r5, r6
 40a:	10ad      	asrs	r5, r5, #2
 40c:	d005      	beq.n	41a <__libc_init_array+0x1a>
 40e:	00a3      	lsls	r3, r4, #2
 410:	58f3      	ldr	r3, [r6, r3]
 412:	3401      	adds	r4, #1
 414:	4798      	blx	r3
 416:	42a5      	cmp	r5, r4
 418:	d1f9      	bne.n	40e <__libc_init_array+0xe>
 41a:	f000 f8b9 	bl	590 <_init>
 41e:	4e08      	ldr	r6, [pc, #32]	; (440 <STACK_SIZE+0x40>)
 420:	4d08      	ldr	r5, [pc, #32]	; (444 <STACK_SIZE+0x44>)
 422:	2400      	movs	r4, #0
 424:	1bad      	subs	r5, r5, r6
 426:	10ad      	asrs	r5, r5, #2
 428:	d005      	beq.n	436 <__libc_init_array+0x36>
 42a:	00a3      	lsls	r3, r4, #2
 42c:	58f3      	ldr	r3, [r6, r3]
 42e:	3401      	adds	r4, #1
 430:	4798      	blx	r3
 432:	42a5      	cmp	r5, r4
 434:	d1f9      	bne.n	42a <__libc_init_array+0x2a>
 436:	bd70      	pop	{r4, r5, r6, pc}
 438:	0000059c 	.word	0x0000059c
 43c:	0000059c 	.word	0x0000059c
 440:	0000059c 	.word	0x0000059c
 444:	000005a4 	.word	0x000005a4

00000448 <register_fini>:
 448:	4b03      	ldr	r3, [pc, #12]	; (458 <register_fini+0x10>)
 44a:	b510      	push	{r4, lr}
 44c:	2b00      	cmp	r3, #0
 44e:	d002      	beq.n	456 <register_fini+0xe>
 450:	4802      	ldr	r0, [pc, #8]	; (45c <register_fini+0x14>)
 452:	f000 f805 	bl	460 <atexit>
 456:	bd10      	pop	{r4, pc}
 458:	00000000 	.word	0x00000000
 45c:	00000471 	.word	0x00000471

00000460 <atexit>:
 460:	b510      	push	{r4, lr}
 462:	0001      	movs	r1, r0
 464:	2300      	movs	r3, #0
 466:	2200      	movs	r2, #0
 468:	2000      	movs	r0, #0
 46a:	f000 f81b 	bl	4a4 <__register_exitproc>
 46e:	bd10      	pop	{r4, pc}

00000470 <__libc_fini_array>:
 470:	b570      	push	{r4, r5, r6, lr}
 472:	4b09      	ldr	r3, [pc, #36]	; (498 <__libc_fini_array+0x28>)
 474:	4c09      	ldr	r4, [pc, #36]	; (49c <__libc_fini_array+0x2c>)
 476:	1ae4      	subs	r4, r4, r3
 478:	10a4      	asrs	r4, r4, #2
 47a:	d009      	beq.n	490 <__libc_fini_array+0x20>
 47c:	4a08      	ldr	r2, [pc, #32]	; (4a0 <__libc_fini_array+0x30>)
 47e:	18a5      	adds	r5, r4, r2
 480:	00ad      	lsls	r5, r5, #2
 482:	18ed      	adds	r5, r5, r3
 484:	682b      	ldr	r3, [r5, #0]
 486:	3c01      	subs	r4, #1
 488:	4798      	blx	r3
 48a:	3d04      	subs	r5, #4
 48c:	2c00      	cmp	r4, #0
 48e:	d1f9      	bne.n	484 <__libc_fini_array+0x14>
 490:	f000 f888 	bl	5a4 <_fini>
 494:	bd70      	pop	{r4, r5, r6, pc}
 496:	46c0      	nop			; (mov r8, r8)
 498:	000005b0 	.word	0x000005b0
 49c:	000005b4 	.word	0x000005b4
 4a0:	3fffffff 	.word	0x3fffffff

000004a4 <__register_exitproc>:
 4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4a6:	46de      	mov	lr, fp
 4a8:	469b      	mov	fp, r3
 4aa:	4b31      	ldr	r3, [pc, #196]	; (570 <__register_exitproc+0xcc>)
 4ac:	4645      	mov	r5, r8
 4ae:	681c      	ldr	r4, [r3, #0]
 4b0:	23a4      	movs	r3, #164	; 0xa4
 4b2:	464e      	mov	r6, r9
 4b4:	4657      	mov	r7, sl
 4b6:	005b      	lsls	r3, r3, #1
 4b8:	b5e0      	push	{r5, r6, r7, lr}
 4ba:	0005      	movs	r5, r0
 4bc:	58e0      	ldr	r0, [r4, r3]
 4be:	000e      	movs	r6, r1
 4c0:	4690      	mov	r8, r2
 4c2:	2800      	cmp	r0, #0
 4c4:	d04b      	beq.n	55e <__register_exitproc+0xba>
 4c6:	6843      	ldr	r3, [r0, #4]
 4c8:	2b1f      	cmp	r3, #31
 4ca:	dc0d      	bgt.n	4e8 <__register_exitproc+0x44>
 4cc:	1c5c      	adds	r4, r3, #1
 4ce:	2d00      	cmp	r5, #0
 4d0:	d121      	bne.n	516 <__register_exitproc+0x72>
 4d2:	3302      	adds	r3, #2
 4d4:	009b      	lsls	r3, r3, #2
 4d6:	6044      	str	r4, [r0, #4]
 4d8:	501e      	str	r6, [r3, r0]
 4da:	2000      	movs	r0, #0
 4dc:	bc3c      	pop	{r2, r3, r4, r5}
 4de:	4690      	mov	r8, r2
 4e0:	4699      	mov	r9, r3
 4e2:	46a2      	mov	sl, r4
 4e4:	46ab      	mov	fp, r5
 4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 4e8:	4b22      	ldr	r3, [pc, #136]	; (574 <__register_exitproc+0xd0>)
 4ea:	2b00      	cmp	r3, #0
 4ec:	d03c      	beq.n	568 <__register_exitproc+0xc4>
 4ee:	20c8      	movs	r0, #200	; 0xc8
 4f0:	0040      	lsls	r0, r0, #1
 4f2:	e000      	b.n	4f6 <__register_exitproc+0x52>
 4f4:	bf00      	nop
 4f6:	2800      	cmp	r0, #0
 4f8:	d036      	beq.n	568 <__register_exitproc+0xc4>
 4fa:	22a4      	movs	r2, #164	; 0xa4
 4fc:	2300      	movs	r3, #0
 4fe:	0052      	lsls	r2, r2, #1
 500:	58a1      	ldr	r1, [r4, r2]
 502:	6043      	str	r3, [r0, #4]
 504:	6001      	str	r1, [r0, #0]
 506:	50a0      	str	r0, [r4, r2]
 508:	3240      	adds	r2, #64	; 0x40
 50a:	5083      	str	r3, [r0, r2]
 50c:	3204      	adds	r2, #4
 50e:	5083      	str	r3, [r0, r2]
 510:	2401      	movs	r4, #1
 512:	2d00      	cmp	r5, #0
 514:	d0dd      	beq.n	4d2 <__register_exitproc+0x2e>
 516:	009a      	lsls	r2, r3, #2
 518:	4691      	mov	r9, r2
 51a:	4481      	add	r9, r0
 51c:	4642      	mov	r2, r8
 51e:	2188      	movs	r1, #136	; 0x88
 520:	464f      	mov	r7, r9
 522:	507a      	str	r2, [r7, r1]
 524:	22c4      	movs	r2, #196	; 0xc4
 526:	0052      	lsls	r2, r2, #1
 528:	4690      	mov	r8, r2
 52a:	4480      	add	r8, r0
 52c:	4642      	mov	r2, r8
 52e:	3987      	subs	r1, #135	; 0x87
 530:	4099      	lsls	r1, r3
 532:	6812      	ldr	r2, [r2, #0]
 534:	468a      	mov	sl, r1
 536:	430a      	orrs	r2, r1
 538:	4694      	mov	ip, r2
 53a:	4642      	mov	r2, r8
 53c:	4661      	mov	r1, ip
 53e:	6011      	str	r1, [r2, #0]
 540:	2284      	movs	r2, #132	; 0x84
 542:	4649      	mov	r1, r9
 544:	465f      	mov	r7, fp
 546:	0052      	lsls	r2, r2, #1
 548:	508f      	str	r7, [r1, r2]
 54a:	2d02      	cmp	r5, #2
 54c:	d1c1      	bne.n	4d2 <__register_exitproc+0x2e>
 54e:	0002      	movs	r2, r0
 550:	4655      	mov	r5, sl
 552:	328d      	adds	r2, #141	; 0x8d
 554:	32ff      	adds	r2, #255	; 0xff
 556:	6811      	ldr	r1, [r2, #0]
 558:	430d      	orrs	r5, r1
 55a:	6015      	str	r5, [r2, #0]
 55c:	e7b9      	b.n	4d2 <__register_exitproc+0x2e>
 55e:	0020      	movs	r0, r4
 560:	304d      	adds	r0, #77	; 0x4d
 562:	30ff      	adds	r0, #255	; 0xff
 564:	50e0      	str	r0, [r4, r3]
 566:	e7ae      	b.n	4c6 <__register_exitproc+0x22>
 568:	2001      	movs	r0, #1
 56a:	4240      	negs	r0, r0
 56c:	e7b6      	b.n	4dc <__register_exitproc+0x38>
 56e:	46c0      	nop			; (mov r8, r8)
 570:	0000058c 	.word	0x0000058c
 574:	00000000 	.word	0x00000000
 578:	000002f8 	.word	0x000002f8
 57c:	0000034e 	.word	0x0000034e
 580:	0000036c 	.word	0x0000036c
 584:	0000038a 	.word	0x0000038a
 588:	000003a8 	.word	0x000003a8

0000058c <_global_impure_ptr>:
 58c:	20000000                                ... 

00000590 <_init>:
 590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 592:	46c0      	nop			; (mov r8, r8)
 594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 596:	bc08      	pop	{r3}
 598:	469e      	mov	lr, r3
 59a:	4770      	bx	lr

0000059c <__init_array_start>:
 59c:	00000449 	.word	0x00000449

000005a0 <__frame_dummy_init_array_entry>:
 5a0:	000000dd                                ....

000005a4 <_fini>:
 5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5a6:	46c0      	nop			; (mov r8, r8)
 5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5aa:	bc08      	pop	{r3}
 5ac:	469e      	mov	lr, r3
 5ae:	4770      	bx	lr

000005b0 <__fini_array_start>:
 5b0:	000000b5 	.word	0x000000b5
